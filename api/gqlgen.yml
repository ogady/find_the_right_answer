# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - schema.graphql

# Where should the generated server code go?
exec:
  filename: interface/graph/generated/generated.go
  package: generated

# Uncomment to enable federation
# federation:
#   filename: graph/generated/federation.go
#   package: generated

# Where should the resolver implementations go?
resolver:
  filename: interface/graph/resolver.go
  type: Resolver

# Optional: turn on use `gqlgen:"fieldName"` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/ogady/find_the_right_answer/api/domain/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  Topic:
    model: github.com/ogady/find_the_right_answer/api/domain/model.Topic
  TopicPiece:
    model: github.com/ogady/find_the_right_answer/api/domain/model.TopicPiece
  StartChar:
    model: github.com/ogady/find_the_right_answer/api/domain/model.StartChar
  NewTopicPiece:
    model: github.com/ogady/find_the_right_answer/api/domain/model.TopicPiece
